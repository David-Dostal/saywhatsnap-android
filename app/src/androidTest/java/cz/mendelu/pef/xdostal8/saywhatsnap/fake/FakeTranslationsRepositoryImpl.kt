package cz.mendelu.pef.xdostal8.saywhatsnap.fake

import cz.mendelu.pef.xdostal8.saywhatsnap.database.ITranslationsRepository
import cz.mendelu.pef.xdostal8.saywhatsnap.mock.TranslationsMock
import cz.mendelu.pef.xdostal8.saywhatsnap.model.database.TranslationEntity
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOf
import javax.inject.Inject

class FakeTranslationsRepositoryImpl @Inject constructor() : ITranslationsRepository {
    // id is autogenerated... for testing purposes static id
    private var todayTranslationId = TranslationsMock.todayTransId
    private var yesterdayTranslationId = TranslationsMock.yesterdayTransId

    private var todayTranslation = TranslationsMock.todayTranslation
    private var yesterdayTranslation = TranslationsMock.yesterdayTranslation

    private var dateChanged = false

    override fun getAll(): Flow<List<TranslationEntity>> {
        todayTranslation.id = 1
        yesterdayTranslation.id = 2
        return flowOf(listOf(todayTranslation, yesterdayTranslation))
    }

    override suspend fun insert(translation: TranslationEntity): Long {
        if (translation == todayTranslation) {
            return todayTranslationId
        } else {
            return yesterdayTranslationId
        }
    }

    override suspend fun deleteTranslationById(id: Long): Int {
        return id.toInt()
    }

    override suspend fun getTranslationById(id: Long): TranslationEntity {
        if (id == todayTranslationId) {
            return todayTranslation
        } else {
            return yesterdayTranslation
        }
    }

    override fun getTranslationByDate(date: Long): Flow<List<TranslationEntity>> {
        if (date == todayTranslationId) {
            return flowOf(listOf(todayTranslation))
        } else {
            return flowOf(listOf(yesterdayTranslation))
        }
    }

    override fun getTranslationsForDay(
        dayStart: Long,
        dayEnd: Long
    ): Flow<List<TranslationEntity>> {
        if (dateChanged) {
            dateChanged = false
            yesterdayTranslation.id = yesterdayTranslationId
            return flowOf(listOf(TranslationsMock.yesterdayTranslation))
        } else {
            dateChanged = true
            todayTranslation.id = todayTranslationId
            return flowOf(listOf(TranslationsMock.todayTranslation))
        }
    }

    override fun getTranslationsWithinTimeframe(
        startTimestamp: Long,
        endTimestamp: Long
    ): Flow<List<TranslationEntity>> {
        todayTranslation.id = todayTranslationId
        yesterdayTranslation.id = yesterdayTranslationId
        return flowOf(listOf(todayTranslation, yesterdayTranslation))
    }

    override fun getAllCategories(): Flow<List<String>> {
        return flowOf(TranslationsMock.listOfCat)
    }

    override fun getTranslationByDay(day: Long): Flow<List<TranslationEntity>> {
        if (day == todayTranslationId) {
            return flowOf(listOf(todayTranslation))
        } else {
            return flowOf(listOf(yesterdayTranslation))
        }
    }

    override suspend fun update(translation: TranslationEntity) {
        // translations params were set to yesterdays one...
        translation.id = 2
        if (translation != yesterdayTranslation) {
            Error()
        }
    }

    override fun getVisibleCategories(): Flow<List<String>> {
        return flowOf(listOf(todayTranslation.category))
    }

    override fun getVisibleTranslations(): Flow<List<TranslationEntity>> {
        return flowOf(listOf(todayTranslation))
    }

    override fun getVisibleTranslationsByCategory(category: String): Flow<List<TranslationEntity>> {
        return flowOf(listOf(todayTranslation))
    }
}